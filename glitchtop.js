// Generated by CoffeeScript 1.6.1

$(function() {
  var Glitchtop,
    _this = this;
  Glitchtop = (function() {

    function Glitchtop() {
      var _this = this;
      this.toggleLock = function(e) {
        return Glitchtop.prototype.toggleLock.apply(_this, arguments);
      };
      this.initData();
      this.initElements();
      this.initCanvas();
      this.fillScreen();
      this.initUI();
      this.initEvents();
      this.initAnimation();
    }

    Glitchtop.prototype.initData = function() {
      var m;
      if (m = location.href.match(/(\d+)px&H\=(\d+)-(\d+)&S=(\d+)-(\d+)&L=(\d+)-(\d+)&P=(\d)&A=(\d)&I=(\d)$/)) {
        this.size = parseInt(m[1]);
        this.hue = {
          min: parseInt(m[2]),
          max: parseInt(m[3])
        };
        this.sat = {
          min: parseInt(m[4]),
          max: parseInt(m[5])
        };
        this.light = {
          min: parseInt(m[6]),
          max: parseInt(m[7])
        };
        this.pattern = parseInt(m[8]);
        this.animating = parseInt(m[9]);
        this["interface"] = parseInt(m[10]);
        this.speed = 70;
      } else {
        this.size = 40;
        this.hue = {
          min: 180,
          max: 230
        };
        this.sat = {
          min: 85,
          max: 100
        };
        this.light = {
          min: 40,
          max: 80
        };
        this.pattern = 1;
        this.animating = 0;
        this.speed = 30;
        this["interface"] = 1;
      }
      this.accent = (this.hue.max + this.hue.min) / 2;
      return this.locks = {
        size: false,
        hue: false,
        sat: false,
        light: false,
        pattern: true,
        speed: true
      };
    };

    Glitchtop.prototype.initCanvas = function() {
      this.view = {
        h: $(window).height(),
        w: $(window).width()
      };
      $("#canvas-holder").html("<canvas id=\"canvas\" width=\"" + this.view.w + "\" height=\"" + this.view.h + "\"></canvas>");
      this.canvas = document.getElementById("canvas");
      return this.ctx = this.canvas.getContext("2d");
    };

    Glitchtop.prototype.initEvents = function() {
      var count,
        _this = this;
      this.shiftHeld = 0;
      $(document).keydown(function(e) {
        if (e.shiftKey && !_this.shiftHeld) {
          return _this.shiftHeld = 1;
        }
      });
      $(document).keyup(function(e) {
        switch (e.which) {
          case 13:
            _this.shuffle();
            break;
          case 32:
            _this.toggleAnimation();
            break;
          case 27:
            _this.toggleUI();
        }
        if (_this.shiftHeld) {
          _this.updateParams();
        }
        return _this.shiftHeld = 0;
      });
      $(document).mousemove(function(e) {
        var xHue, ySat;
        if (_this.shiftHeld && (e.pageX % 5 === 1 || e.pageY % 5 === 1)) {
          xHue = ( ( e.pageX / _this.view.w ) * 360 ) | 0;
          ySat = 100 - ( ( (e.pageY / _this.view.h ) * 100 ) | 0 );
          _this.$el.sliderHue.dragslider({
            values: [xHue, xHue]
          });
          _this.$el.sliderSat.dragslider({
            values: [ySat, ySat]
          });
          _this.hue = {
            min: xHue,
            max: xHue
          };
          _this.sat = {
            min: ySat,
            max: ySat
          };
          return _this.fillScreen();
        }
      });
      $(document).click(function(e) {
        if ($(e.target).closest('.ui-holder').length === 0) {
          return _this.toggleAnimation();
        }
      });
      count = 0;
      return $(window).resize(function() {
        if (count % 2 === 0) {
          _this.initCanvas();
          _this.fillScreen();
        }
        return count++;
      });
    };

    Glitchtop.prototype.initElements = function() {
      return this.$el = {
        uiData: $('.ui-data'),
        uiHolder: $('.ui-holder'),
        shareLinkHref: $('.share-link-href'),
        shareLinkTwitter: $('.share-link-twitter'),
        sliderSize: $('#slider-size'),
        sliderHue: $('#slider-hue'),
        sliderSat: $('#slider-sat'),
        sliderLight: $('#slider-light'),
        sliderPattern: $('#slider-pattern'),
        sliderSpeed: $('#slider-speed'),
        btnAnimate: $('.btn-animate'),
        btnShuffle: $('.btn-shuffle'),
        btnCredits: $('.btn-credits'),
        btnKeyboard: $('.btn-keyboard'),
        btnShare: $('.btn-share'),
        dynamic: $('.dynamic-c'),
        btn: $('.btn'),
        lock: $('.lock')
      };
    };

    Glitchtop.prototype.initUI = function() {
      var isQueued, that,
        _this = this;
      isQueued = 0;
      this.$el.sliderSize.dragslider({
        value: this.size,
        rangeDrag: false,
        min: 10,
        max: 100,
        step: 10,
        slide: function(e, ui) {
          _this.size = ui.value;
          return _this.fillScreen();
        },
        change: function(e, ui) {
          if (!_this.shiftHeld) {
            return _this.updateParams();
          }
        }
      });
      this.$el.sliderHue.dragslider({
        range: true,
        rangeDrag: true,
        min: 0,
        max: 360,
        values: [this.hue.min, this.hue.max],
        slide: function(e, ui) {
          _this.hue.min = ui.values[0];
          _this.hue.max = ui.values[1];
          return _this.fillScreen();
        },
        change: function(e, ui) {
          if (!_this.shiftHeld) {
            return _this.updateParams();
          }
        }
      });
      this.$el.sliderSat.dragslider({
        range: true,
        rangeDrag: true,
        min: 0,
        max: 100,
        values: [this.sat.min, this.sat.max],
        slide: function(e, ui) {
          _this.sat.min = ui.values[0];
          _this.sat.max = ui.values[1];
          return _this.fillScreen();
        },
        change: function() {
          if (!_this.shiftHeld) {
            return _this.updateParams();
          }
        }
      });
      this.$el.sliderLight.dragslider({
        range: true,
        rangeDrag: true,
        min: 0,
        max: 100,
        values: [this.light.min, this.light.max],
        slide: function(e, ui) {
          _this.light.min = ui.values[0];
          _this.light.max = ui.values[1];
          return _this.fillScreen();
        },
        change: function() {
          if (!_this.shiftHeld) {
            return _this.updateParams();
          }
        }
      });
      this.$el.sliderSpeed.dragslider({
        value: 140 - this.speed,
        rangeDrag: false,
        min: 30,
        max: 110,
        step: 10,
        slide: function(e, ui) {
          _this.speed = 140 - ui.value;
          if (_this.animating != null) {
            _this.stopAnimation();
            return _this.startAnimation();
          }
        },
        start: function() {
          if (!_this.animating) {
            _this.startAnimation();
            return isQueued = 1;
          }
        },
        stop: function() {
          if (_this.animating && isQueued) {
            _this.stopAnimation();
            return isQueued = 0;
          }
        }
      });
      this.$el.sliderPattern.dragslider({
        value: this.pattern,
        rangeDrag: false,
        min: 1,
        max: 4,
        step: 1,
        slide: function(e, ui) {
          _this.pattern = ui.value;
          return _this.fillScreen();
        },
        change: function(e, ui) {
          return _this.updateParams();
        }
      });
      this.$el.btnAnimate.click(function(e) {
        _this.toggleAnimation();
        return e.stopPropagation();
      });
      that = this;
      this.$el.btnShuffle.click(function(e) {
        that.shuffle();
        $(this).css({
          color: "hsl(" + this.accent + ", 80%, 70%)"
        });
        return e.stopPropagation();
      });
      this.$el.btnCredits.click(function(e) {
        _this.toggleVisibility('credits');
        return e.stopPropagation();
      });
      this.$el.btnKeyboard.click(function(e) {
        _this.toggleVisibility('keyboard');
        return e.stopPropagation();
      });
      this.$el.btnShare.click(function(e) {
        _this.toggleVisibility('share');
        return e.stopPropagation();
      });
      if (this["interface"] !== 0) {
        this.$el.uiHolder.show();
      }
      this.updateLockStates();
      this.$el.lock.click(this.toggleLock);
      return this.$el.btn.hover(function() {
        $(this).addClass("dynamic-c").css({
          color: "hsl(" + this.accent + ", 80%, 70%)"
        });
        return true;
      }, function() {
        var $this, el;
        $this = $(this);
        el = $this.attr("class").split(" ")[1].split("-")[1];
        if (!$("." + el).is(":visible")) {
          $this.removeClass("dynamic-c");
          $this.css({
            color: "rgb(200,200,200)"
          });
        }
        return true;
      });
    };

    Glitchtop.prototype.initAnimation = function() {
      if (this.animating) {
        return this.startAnimation;
      }
    };

    Glitchtop.prototype.startAnimation = function() {
      var _this = this;
      this.animating = 1;
      this.animatingInt = setInterval(function() {
        _this.fillScreen();
        return true;
      }, this.speed);
      return this.$el.btnAnimate.html('<i class="icon-pause"></i>');
    };

    Glitchtop.prototype.stopAnimation = function() {
      this.animating = 0;
      try {
        clearInterval(this.animatingInt);
      } catch (_error) {}
      return this.$el.btnAnimate.html('<i class="icon-play"></i>');
    };

    Glitchtop.prototype.toggleAnimation = function() {
      if (this.animating) {
        this.stopAnimation();
      } else {
        this.startAnimation();
      }
      return this.updateParams();
    };

    Glitchtop.prototype.fillScreen = function() {
      if (this.size < 20) {
        this.draw(4);
      } else if (this.size < 50) {
        this.draw(2);
      } else {
        this.draw(1);
      }
      this.dataToUI();
      return this.changeUIColor();
    };

    Glitchtop.prototype.draw = function(d) {
      var h, s, w;
      d = d * this.pattern;
      s = this.size;
      w = Math.floor(this.view.w / this.size);
      h = Math.floor(this.view.h / this.size);
      w = Math.floor(w / d) + 1;
      h = Math.floor(h / d) + 1;
      for ( var x = 0; x < w; x++ ) {
        for ( var y = 0; y < h; y++ ) {
          this.ctx.fillStyle = this.genColor();
          for ( var a = (d-1); a >= 0; a-- ) {
            for ( var b = (d-1); b >= 0; b-- ) {
              this.ctx.fillRect( (x+w*a)*s, (y+h*b)*s, s, s);
            }
          }
        }
      };
      return true;
    };

    Glitchtop.prototype.shuffle = function() {
      if (this.randomize() === false) {
        return;
      }
      this.updateParams();
      this.updateUI();
      return this.fillScreen();
    };

    Glitchtop.prototype.randomize = function() {
      var changed, _ref, _ref1, _ref2;
      changed = false;
      if (!this.locks.size) {
        this.size = Math.round(this.rand(10, 100) / 10) * 10;
        changed = true;
      }
      if (!this.locks.hue) {
        this.hue = {
          min: this.rand(0, 360),
          max: this.rand(0, 360)
        };
        if (this.hue.max < this.hue.min) {
          _ref = [this.hue.max, this.hue.min], this.hue.min = _ref[0], this.hue.max = _ref[1];
        }
        changed = true;
      }
      if (!this.locks.sat) {
        this.sat = {
          min: this.rand(40, 80),
          max: this.rand(60, 100)
        };
        if (this.sat.max < this.sat.min) {
          _ref1 = [this.sat.max, this.sat.min], this.sat.min = _ref1[0], this.sat.max = _ref1[1];
        }
        changed = true;
      }
      if (!this.locks.light) {
        this.light = {
          min: this.rand(20, 60),
          max: this.rand(40, 100)
        };
        if (this.light.max < this.light.min) {
          _ref2 = [this.light.max, this.light.min], this.light.min = _ref2[0], this.light.max = _ref2[1];
        }
        changed = true;
      }
      return changed;
    };

    Glitchtop.prototype.deviceCheck = function() {
      if (navigator.userAgent.match(/iPhone/i)) {
        this.$el.uiHolder.remove();
        true;
      }
      return false;
    };

    Glitchtop.prototype.toggleVisibility = function(cl) {
      var $el;
      $el = $('.' + cl);
      if ($el.is(":visible")) {
        $el.hide();
      } else {
        $('.info').hide();
        $el.show();
      }
      this.$el.btn.removeClass('dynamic-c').css({
        color: 'rgb(200,200,200)'
      });
      return $('.btn-' + cl).addClass('dynamic-c').css({
        color: "hsl(" + this.accent + ", 80%, 70%)"
      });
    };

    Glitchtop.prototype.toggleUI = function() {
      var $ui;
      $ui = this.$el.uiHolder;
      if ($ui.is(':visible')) {
        this["interface"] = 0;
        $ui.hide();
      } else {
        this["interface"] = 1;
        $ui.show();
      }
      return this.updateParams();
    };

    Glitchtop.prototype.changeUIColor = function() {
      this.accent = (this.hue.min + this.hue.max) / 2;
      return this.$el.dynamic.css({
        color: "hsl(" + this.accent + ", 80%, 70%)"
      });
    };

    Glitchtop.prototype.genColor = function(hue, sat, light) {
      var h, l, s;
      h = hue != null ? hue : this.rand(this.hue.min, this.hue.max);
      s = sat != null ? sat : this.rand(this.sat.min, this.sat.max);
      l = light != null ? light : this.rand(this.light.min, this.light.max);
      return "hsl(" + h + "," + s + "%," + l + "%)";
    };

    Glitchtop.prototype.updateParams = function() {
      this.dataToURL();
      return this.dataToUI();
    };

    Glitchtop.prototype.toggleLock = function(e) {
      var param, state;
      param = $(e.currentTarget).data('param');
      state = this.locks[param];
      if (state) {
        return this.setLockState(param, false);
      } else {
        return this.setLockState(param, true);
      }
    };

    Glitchtop.prototype.updateLockStates = function() {
      var key, val, _ref, _results;
      _ref = this.locks;
      _results = [];
      for (key in _ref) {
        val = _ref[key];
        _results.push(this.setLockState(key, val));
      }
      return _results;
    };

    Glitchtop.prototype.setLockState = function(param, state) {
      this.locks[param] = state;
      if (state) {
        return $(".lock-" + param + " i").attr('class', 'icon-lock');
      } else {
        return $(".lock-" + param + " i").attr('class', 'icon-lock-open');
      }
    };

    Glitchtop.prototype.dataToURL = function() {
      return location.hash = this.toParams();
    };

    Glitchtop.prototype.dataToUI = function() {
      var link;
      link = location.href;
      this.$el.uiData.html(this.toStr());
      this.$el.shareLinkHref.attr('href', link);
      return this.$el.shareLinkTwitter.attr('href', "http://twitter.com/home?status=I made this with %23glitchtop " + encodeURIComponent(link));
    };

    Glitchtop.prototype.updateUI = function() {
      this.$el.sliderSize.dragslider({
        value: this.size
      });
      this.$el.sliderHue.dragslider({
        values: [this.hue.min, this.hue.max]
      });
      this.$el.sliderSat.dragslider({
        values: [this.sat.min, this.sat.max]
      });
      return this.$el.sliderLight.dragslider({
        values: [this.light.min, this.light.max]
      });
    };

    Glitchtop.prototype.toParams = function() {
      return "" + this.size + "px&H=" + this.hue.min + "-" + this.hue.max + "&S=" + this.sat.min + "-" + this.sat.max + "&L=" + this.light.min + "-" + this.light.max + "&P=" + this.pattern + "&A=" + this.animating + "&I=" + this["interface"];
    };

    Glitchtop.prototype.toStr = function() {
      return "" + this.size + "px, H=" + this.hue.min + "-" + this.hue.max + ", S=" + this.sat.min + "-" + this.sat.max + ", L=" + this.light.min + "-" + this.light.max;
    };

    Glitchtop.prototype.rand = function(min, max) {
      return Math.floor(Math.random() * (max - min + 1)) + min;
    };

    return Glitchtop;

  })();
  return window.Glitchtop = new Glitchtop;
});
